// PROGRAM compiler
compiler = {

  compile: function (input) {
    // initialize compiler variables
    this.inbuf = input ;
    this.initialize() ;
    // call the first rule
    this.ctxpush('PROGRAM') ;
    this.rulePROGRAM() ;
    this.ctxpop() ;
    // special case handling of first rule failure
    if ((!this.eflag) && (!this.pflag)) {
      this.eflag = true ;
      this.erule = 'PROGRAM' ;
      this.einput = this.inp ; } ;
    return this.eflag ;
  },

  rulePROGRAM: function () {
    this.test('.SYNTAX');
    if (this.pflag) {
      while (!this.eflag) {
        this.ctxpush('ID') ;
        this.ruleID() ;
        this.ctxpop() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('\t') ;
        this.out('ADR ') ;
        this.out(this.token) ;
        this.eol() ;
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.ctxpush('ST') ;
          this.ruleST() ;
          this.ctxpop() ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.test('.END');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('\t') ;
        this.out('END') ;
        this.eol() ;
        break }
    } ;
  } ,

  ruleST: function () {
    this.ctxpush('ID') ;
    this.ruleID() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out(this.token) ;
        this.eol() ;
        this.test('=');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.ctxpush('EX1') ;
        this.ruleEX1() ;
        this.ctxpop() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.test('.,');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('\t') ;
        this.out('R') ;
        this.eol() ;
        break }
    } ;
  } ,

  ruleEX1: function () {
    this.ctxpush('EX2') ;
    this.ruleEX2() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.test('/');
          if (this.pflag) {
            while (!this.eflag) {
              this.out('\t') ;
              this.out('BT L') ;
              if (this.stack[this.stackframe + 0] == 0) {
                this.stack[this.stackframe + 0] = this.labelcount ;
                this.labelcount++ ; } ;
              this.out(this.stack[this.stackframe + 0]) ;
              this.eol() ;
              this.ctxpush('EX2') ;
              this.ruleEX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              break }
          } ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('L') ;
        if (this.stack[this.stackframe + 0] == 0) {
          this.stack[this.stackframe + 0] = this.labelcount ;
          this.labelcount++ ; } ;
        this.out(this.stack[this.stackframe + 0]) ;
        this.eol() ;
        break }
    } ;
  } ,

  ruleEX2: function () {
    this.ctxpush('EX3') ;
    this.ruleEX3() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('BF L') ;
        if (this.stack[this.stackframe + 0] == 0) {
          this.stack[this.stackframe + 0] = this.labelcount ;
          this.labelcount++ ; } ;
        this.out(this.stack[this.stackframe + 0]) ;
        this.eol() ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('OUTPUT') ;
      this.ruleOUTPUT() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          break }
      } ;
    } ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.ctxpush('EX3') ;
          this.ruleEX3() ;
          this.ctxpop() ;
          if (this.pflag) {
            while (!this.eflag) {
              this.out('\t') ;
              this.out('BE') ;
              this.eol() ;
              break }
          } ;
          if ((!this.pflag) && (!this.eflag)) {
            this.ctxpush('OUTPUT') ;
            this.ruleOUTPUT() ;
            this.ctxpop() ;
            if (this.pflag) {
              while (!this.eflag) {
                break }
            } ;
          } ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('L') ;
        if (this.stack[this.stackframe + 0] == 0) {
          this.stack[this.stackframe + 0] = this.labelcount ;
          this.labelcount++ ; } ;
        this.out(this.stack[this.stackframe + 0]) ;
        this.eol() ;
        break }
    } ;
  } ,

  ruleEX3: function () {
    this.ctxpush('ID') ;
    this.ruleID() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('CLL ') ;
        this.out(this.token) ;
        this.eol() ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('STRING') ;
      this.ruleSTRING() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('TST ') ;
          this.out(this.token) ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('.ID');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('ID') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('.NUMBER');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('NUM') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('.STRING');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('SR') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('(');
      if (this.pflag) {
        while (!this.eflag) {
          this.ctxpush('EX1') ;
          this.ruleEX1() ;
          this.ctxpop() ;
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          this.test(')');
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('.EMPTY');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('SET') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('$');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('L') ;
          if (this.stack[this.stackframe + 0] == 0) {
            this.stack[this.stackframe + 0] = this.labelcount ;
            this.labelcount++ ; } ;
          this.out(this.stack[this.stackframe + 0]) ;
          this.eol() ;
          this.ctxpush('EX3') ;
          this.ruleEX3() ;
          this.ctxpop() ;
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          this.out('\t') ;
          this.out('BT L') ;
          if (this.stack[this.stackframe + 0] == 0) {
            this.stack[this.stackframe + 0] = this.labelcount ;
            this.labelcount++ ; } ;
          this.out(this.stack[this.stackframe + 0]) ;
          this.eol() ;
          this.out('\t') ;
          this.out('SET') ;
          this.eol() ;
          break }
      } ;
    } ;
  } ,

  ruleOUTPUT: function () {
    this.test('.OUT');
    if (this.pflag) {
      while (!this.eflag) {
        this.test('(');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.ctxpush('OUT1') ;
          this.ruleOUT1() ;
          this.ctxpop() ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.test(')');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('.LABEL');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('LB') ;
          this.eol() ;
          this.ctxpush('OUT1') ;
          this.ruleOUT1() ;
          this.ctxpop() ;
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          break }
      } ;
    } ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('OUT') ;
        this.eol() ;
        break }
    } ;
  } ,

  ruleOUT1: function () {
    this.test('*1');
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('GN1') ;
        this.eol() ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('*2');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('GN2') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('*');
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('CI') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('STRING') ;
      this.ruleSTRING() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('CL ') ;
          this.out(this.token) ;
          this.eol() ;
          break }
      } ;
    } ;
  } ,

  rulePREFIX: function () {
    this.pflag = true ;
    while (this.pflag) {
      this.pflag = 
        (this.inbuf.charCodeAt(this.inp) == 32)  ||
        (this.inbuf.charCodeAt(this.inp) == 9)  ||
        (this.inbuf.charCodeAt(this.inp) == 13)  ||
        (this.inbuf.charCodeAt(this.inp) == 10)  ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
    };
    this.pflag = true ;
    if (this.pflag) {
    } ;
  } ,

  ruleID: function () {
    this.ctxpush('PREFIX') ;
    this.rulePREFIX() ;
    this.ctxpop() ;
    if (this.eflag) return ;
    if (this.pflag) {
      this.tflag = true ; 
      this.token = '' ;
      this.pflag = true ;
      if (!this.pflag) return;
      this.ctxpush('ALPHA') ;
      this.ruleALPHA() ;
      this.ctxpop() ;
      if (this.eflag) return ;
      if (!this.pflag) return;
      this.pflag = true ;
      while (this.pflag) {
        this.ctxpush('ALPHA') ;
        this.ruleALPHA() ;
        this.ctxpop() ;
        if (this.eflag) return ;
        if (this.pflag) {
        } ;
        if (!this.pflag) {
          this.ctxpush('DIGIT') ;
          this.ruleDIGIT() ;
          this.ctxpop() ;
          if (this.eflag) return ;
          if (this.pflag) {
          } ;
        } ;
      };
      this.pflag = true ;
      if (!this.pflag) return;
      this.tflag = false ;
      this.pflag = true ;
      if (!this.pflag) return;
    } ;
  } ,

  ruleNUMBER: function () {
    this.ctxpush('PREFIX') ;
    this.rulePREFIX() ;
    this.ctxpop() ;
    if (this.eflag) return ;
    if (this.pflag) {
      this.tflag = true ; 
      this.token = '' ;
      this.pflag = true ;
      if (!this.pflag) return;
      this.ctxpush('DIGIT') ;
      this.ruleDIGIT() ;
      this.ctxpop() ;
      if (this.eflag) return ;
      if (!this.pflag) return;
      this.pflag = true ;
      while (this.pflag) {
        this.ctxpush('DIGIT') ;
        this.ruleDIGIT() ;
        this.ctxpop() ;
        if (this.eflag) return ;
      };
      this.pflag = true ;
      if (!this.pflag) return;
      this.tflag = false ;
      this.pflag = true ;
      if (!this.pflag) return;
    } ;
  } ,

  ruleSTRING: function () {
    this.ctxpush('PREFIX') ;
    this.rulePREFIX() ;
    this.ctxpop() ;
    if (this.eflag) return ;
    if (this.pflag) {
      this.tflag = true ; 
      this.token = '' ;
      this.pflag = true ;
      if (!this.pflag) return;
      this.pflag = 
        (this.inbuf.charCodeAt(this.inp) == 39)  ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
      if (!this.pflag) return;
      this.pflag = true ;
      while (this.pflag) {
        this.pflag = 
          (this.inbuf.charCodeAt(this.inp) == 13)  ||
          (this.inbuf.charCodeAt(this.inp) == 10)  ||
          (this.inbuf.charCodeAt(this.inp) == 39)  ;
        this.pflag = !this.pflag ;
        if (this.pflag) {
          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
          this.inp++ } ;
      };
      this.pflag = true ;
      if (!this.pflag) return;
      this.pflag = 
        (this.inbuf.charCodeAt(this.inp) == 39)  ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
      if (!this.pflag) return;
      this.tflag = false ;
      this.pflag = true ;
      if (!this.pflag) return;
    } ;
  } ,

  ruleALPHA: function () {
    this.pflag = 
      ((this.inbuf.charCodeAt(this.inp) >= 65) &&
       (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||
      ((this.inbuf.charCodeAt(this.inp) >= 97) &&
       (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;
    if (this.pflag) {
      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
      this.inp++ } ;
    if (this.pflag) {
    } ;
  } ,

  ruleDIGIT: function () {
    this.pflag = 
      ((this.inbuf.charCodeAt(this.inp) >= 48) &&
       (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;
    if (this.pflag) {
      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
      this.inp++ } ;
    if (this.pflag) {
    } ;
  } ,

  // runtime variables
  pflag: false ,
  tflag: false ,
  eflag: false ,
  inp: 0 ,
  inbuf:  '' ,
  outbuf:  '' ,
  erule:  '' ,
  einput: 0 ,
  token: '' ,
  labelcount: 0 ,
  stackframesize: 6 ,
  stackframe: 0 ,
  stos: -1 ,
  stack: [] ,

  initialize: function () {
    // initialize for another compile
    this.pflag = false ;
    this.tflag = false ;
    this.eflag = false ;
    this.inp = 0 ;
    this.outbuf = '' ;
    this.erule = '' ;
    this.einput = 0 ;
    this.token = '' ;
    this.labelcount = 1 ;
    this.stackframe = -1 ;
    this.stos = -1 ;
    this.stack = [] ;
  },

  ctxpush: function (rulename){
    // push and initialize a new stackframe
    var LM ;
    // new context inherits current context left margin
    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;
    this.stos++ ;
    this.stackframe = this.stos * this.stackframesize ;
    // stackframe definition
    this.stack[this.stackframe + 0] = 0 ;        // generated label
    this.stack[this.stackframe + 1] = rulename ; // called rule name
    this.stack[this.stackframe + 2] = LM ;       // left margin
    // clear additional stackframe backtracking entries
    this.bkclear() ;
  },

  ctxpop: function (){
    // pop and possibly deallocate old stackframe
    this.stos-- ; // pop stackframe
    this.stackframe = this.stos * this.stackframesize ;
  },

  out: function (s){
    // output string
    var i ;
    // if newline last output, add left margin before string
    if (this.outbuf.charAt(this.outbuf.length - 1) == '\n') {
      i = this.stack[this.stackframe + 2] ;
      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;
    this.outbuf += s ;
  },

  eol: function (){
    // output end of line
    this.outbuf += '\n' ;
  },

  test: function (s) {
    // test for a string in the input
    var i ;
    // delete whitespace
    while ((this.inbuf.charAt(this.inp) == ' ')  ||
           (this.inbuf.charAt(this.inp) == '\n') ||
           (this.inbuf.charAt(this.inp) == '\r') ||
           (this.inbuf.charAt(this.inp) == '\t') ) this.inp++ ;
    // test string case insensitive
    this.pflag = true ; i = 0 ;
    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )
    { this.pflag = (s.charAt(i).toUpperCase() ==
                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;
      i++ ; } ;
    this.pflag = this.pflag && (i == s.length) ;
    // advance input if found
    if (this.pflag) this.inp = this.inp + s.length ;
  },

  bkerr: function () {
    // compilation error, provide error indication and context
    this.eflag = true ;
    this.erule = this.stack[this.stackframe + 1] ;
    this.einput = this.inp ;
  },

  bkset: function () {
    // set backtrack context on stack
    this.stack[this.stackframe + 3] = this.inp ;           // input position
    this.stack[this.stackframe + 4] = this.outbuf.length ; // output position
    this.stack[this.stackframe + 5] = this.token ;         // current token
  },

  bkclear: function () {
    // clear backtrack context on stack
    this.stack[this.stackframe + 3] = -1 ; // input position
    this.stack[this.stackframe + 4] = -1 ; // output position
    this.stack[this.stackframe + 5] = '' ; // current token
  },

  bkrestore: function () {
    // restore context for backtracking
    this.eflag = false ;
    this.inp = this.stack[this.stackframe + 3] ;           // input position
    this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position
    this.token = this.stack[this.stackframe + 5] ;         // current token
  }

}
