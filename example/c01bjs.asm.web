// AEXP2 compiler
compiler = {

  compile: function (input) {
    // initialize compiler variables
    this.inbuf = input ;
    this.initialize() ;
    // call the first rule
    this.ctxpush('AEXP2') ;
    this.ruleAEXP2() ;
    this.ctxpop() ;
    // special case handling of first rule failure
    if ((!this.eflag) && (!this.pflag)) {
      this.eflag = true ;
      this.erule = 'AEXP2' ;
      this.einput = this.inp ; } ;
    return this.eflag ;
  },

  ruleAEXP2: function () {
    this.ctxpush('AS') ;
    this.ruleAS() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.ctxpush('AS') ;
          this.ruleAS() ;
          this.ctxpop() ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleAS: function () {
    this.ctxpush('ID') ;
    this.ruleID() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('address ') ;
        this.out(this.token) ;
        this.eol() ;
        this.test(':=');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.ctxpush('RX1') ;
        this.ruleRX1() ;
        this.ctxpop() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('\t') ;
        this.out('store') ;
        this.eol() ;
        this.test(';');
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleRX1: function () {
    this.ctxpush('RX2') ;
    this.ruleRX2() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.bkset() ;
        this.test('=');
        if (this.pflag) {
          while (!this.eflag) {
            this.ctxpush('RX2') ;
            this.ruleRX2() ;
            this.ctxpop() ;
            if (!this.pflag) this.bkerr();
            if (this.eflag) break ;
            this.out('\t') ;
            this.out('eq') ;
            this.eol() ;
            break }
        } ;
        if (!this.pflag) {
          if (this.eflag) this.bkrestore() ;
          this.test('<');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('RX2') ;
              this.ruleRX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('lt') ;
              this.eol() ;
              break }
          } ;
        } ;
        if (!this.pflag) {
          if (this.eflag) this.bkrestore() ;
          this.test('>');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('RX2') ;
              this.ruleRX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('gt') ;
              this.eol() ;
              break }
          } ;
        } ;
        if (!this.pflag) {
          if (this.eflag) this.bkrestore() ;
          this.test('<=');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('RX2') ;
              this.ruleRX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('le') ;
              this.eol() ;
              break }
          } ;
        } ;
        if (!this.pflag) {
          if (this.eflag) this.bkrestore() ;
          this.test('>=');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('RX2') ;
              this.ruleRX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('ge') ;
              this.eol() ;
              break }
          } ;
        } ;
        if (!this.pflag) {
          if (this.eflag) this.bkrestore() ;
          this.pflag = true ;
          if (this.pflag) {
            while (!this.eflag) {
              break }
          } ;
        } ;
        if (this.eflag) this.bkrestore() ;
        this.bkclear() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleRX2: function () {
    this.test('~');
    if (this.pflag) {
      while (!this.eflag) {
        this.ctxpush('EX0') ;
        this.ruleEX0() ;
        this.ctxpop() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        this.out('\t') ;
        this.out('not') ;
        this.eol() ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('EX0') ;
      this.ruleEX0() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          break }
      } ;
    } ;
  } ,

  ruleEX0: function () {
    this.ctxpush('EX1') ;
    this.ruleEX1() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.test('<-');
        if (this.pflag) {
          while (!this.eflag) {
            this.ctxpush('EX1') ;
            this.ruleEX1() ;
            this.ctxpop() ;
            if (!this.pflag) this.bkerr();
            if (this.eflag) break ;
            this.out('\t') ;
            this.out('shl') ;
            this.eol() ;
            break }
        } ;
        if ((!this.pflag) && (!this.eflag)) {
          this.test('->');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('EX2') ;
              this.ruleEX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('shr') ;
              this.eol() ;
              break }
          } ;
        } ;
        if ((!this.pflag) && (!this.eflag)) {
          this.pflag = true ;
          if (this.pflag) {
            while (!this.eflag) {
              break }
          } ;
        } ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleEX1: function () {
    this.ctxpush('EX2') ;
    this.ruleEX2() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.bkset() ;
          this.test('+');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('EX2') ;
              this.ruleEX2() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('add') ;
              this.eol() ;
              break }
          } ;
          if (!this.pflag) {
            if (this.eflag) this.bkrestore() ;
            this.test('-');
            if (this.pflag) {
              while (!this.eflag) {
                this.ctxpush('EX2') ;
                this.ruleEX2() ;
                this.ctxpop() ;
                if (!this.pflag) this.bkerr();
                if (this.eflag) break ;
                this.out('\t') ;
                this.out('sub') ;
                this.eol() ;
                break }
            } ;
          } ;
          if (this.eflag) this.bkrestore() ;
          this.bkclear() ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleEX2: function () {
    this.ctxpush('EX3') ;
    this.ruleEX3() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.test('*');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('EX3') ;
              this.ruleEX3() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('mpy') ;
              this.eol() ;
              break }
          } ;
          if ((!this.pflag) && (!this.eflag)) {
            this.test('/');
            if (this.pflag) {
              while (!this.eflag) {
                this.ctxpush('EX3') ;
                this.ruleEX3() ;
                this.ctxpop() ;
                if (!this.pflag) this.bkerr();
                if (this.eflag) break ;
                this.out('\t') ;
                this.out('div') ;
                this.eol() ;
                break }
            } ;
          } ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleEX3: function () {
    this.ctxpush('EX4') ;
    this.ruleEX4() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.pflag = true ;
        while (this.pflag & !this.eflag) {
          this.test('^');
          if (this.pflag) {
            while (!this.eflag) {
              this.ctxpush('EX3') ;
              this.ruleEX3() ;
              this.ctxpop() ;
              if (!this.pflag) this.bkerr();
              if (this.eflag) break ;
              this.out('\t') ;
              this.out('exp') ;
              this.eol() ;
              break }
          } ;
        } ;
        this.pflag = !this.eflag ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
  } ,

  ruleEX4: function () {
    this.test('+');
    if (this.pflag) {
      while (!this.eflag) {
        this.ctxpush('EX5') ;
        this.ruleEX5() ;
        this.ctxpop() ;
        if (!this.pflag) this.bkerr();
        if (this.eflag) break ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('-');
      if (this.pflag) {
        while (!this.eflag) {
          this.ctxpush('EX5') ;
          this.ruleEX5() ;
          this.ctxpop() ;
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          this.out('\t') ;
          this.out('minus') ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('EX5') ;
      this.ruleEX5() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          break }
      } ;
    } ;
  } ,

  ruleEX5: function () {
    this.ctxpush('ID') ;
    this.ruleID() ;
    this.ctxpop() ;
    if (this.pflag) {
      while (!this.eflag) {
        this.out('\t') ;
        this.out('load ') ;
        this.out(this.token) ;
        this.eol() ;
        break }
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.ctxpush('NUMBER') ;
      this.ruleNUMBER() ;
      this.ctxpop() ;
      if (this.pflag) {
        while (!this.eflag) {
          this.out('\t') ;
          this.out('literal ') ;
          this.out(this.token) ;
          this.eol() ;
          break }
      } ;
    } ;
    if ((!this.pflag) && (!this.eflag)) {
      this.test('(');
      if (this.pflag) {
        while (!this.eflag) {
          this.ctxpush('EX0') ;
          this.ruleEX0() ;
          this.ctxpop() ;
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          this.test(')');
          if (!this.pflag) this.bkerr();
          if (this.eflag) break ;
          break }
      } ;
    } ;
  } ,

  rulePREFIX: function () {
    this.pflag = true ;
    while (this.pflag) {
      this.pflag = 
        (this.inbuf.charCodeAt(this.inp) == 32)  ||
        (this.inbuf.charCodeAt(this.inp) == 9)  ||
        (this.inbuf.charCodeAt(this.inp) == 13)  ||
        (this.inbuf.charCodeAt(this.inp) == 10)  ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
    };
    this.pflag = true ;
    if (this.pflag) {
    } ;
  } ,

  ruleID: function () {
    this.ctxpush('PREFIX') ;
    this.rulePREFIX() ;
    this.ctxpop() ;
    if (this.eflag) return ;
    if (this.pflag) {
      this.tflag = true ; 
      this.token = '' ;
      this.pflag = true ;
      if (!this.pflag) return;
      this.pflag = 
        ((this.inbuf.charCodeAt(this.inp) >= 65) &&
         (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||
        ((this.inbuf.charCodeAt(this.inp) >= 97) &&
         (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
      if (!this.pflag) return;
      this.pflag = true ;
      while (this.pflag) {
        this.pflag = 
          ((this.inbuf.charCodeAt(this.inp) >= 65) &&
           (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||
          ((this.inbuf.charCodeAt(this.inp) >= 97) &&
           (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;
        if (this.pflag) {
          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
          this.inp++ } ;
        if (this.pflag) {
        } ;
        if (!this.pflag) {
          this.pflag = 
            ((this.inbuf.charCodeAt(this.inp) >= 48) &&
             (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;
          if (this.pflag) {
            if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
            this.inp++ } ;
          if (this.pflag) {
          } ;
        } ;
      };
      this.pflag = true ;
      if (!this.pflag) return;
      this.tflag = false ;
      this.pflag = true ;
      if (!this.pflag) return;
    } ;
  } ,

  ruleNUMBER: function () {
    this.ctxpush('PREFIX') ;
    this.rulePREFIX() ;
    this.ctxpop() ;
    if (this.eflag) return ;
    if (this.pflag) {
      this.tflag = true ; 
      this.token = '' ;
      this.pflag = true ;
      if (!this.pflag) return;
      this.pflag = 
        ((this.inbuf.charCodeAt(this.inp) >= 48) &&
         (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;
      if (this.pflag) {
        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
        this.inp++ } ;
      if (!this.pflag) return;
      this.pflag = true ;
      while (this.pflag) {
        this.pflag = 
          ((this.inbuf.charCodeAt(this.inp) >= 48) &&
           (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;
        if (this.pflag) {
          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;
          this.inp++ } ;
      };
      this.pflag = true ;
      if (!this.pflag) return;
      this.tflag = false ;
      this.pflag = true ;
      if (!this.pflag) return;
    } ;
  } ,

  // runtime variables
  pflag: false ,
  tflag: false ,
  eflag: false ,
  inp: 0 ,
  inbuf:  '' ,
  outbuf:  '' ,
  erule:  '' ,
  einput: 0 ,
  token: '' ,
  labelcount: 0 ,
  stackframesize: 6 ,
  stackframe: 0 ,
  stos: -1 ,
  stack: [] ,

  initialize: function () {
    // initialize for another compile
    this.pflag = false ;
    this.tflag = false ;
    this.eflag = false ;
    this.inp = 0 ;
    this.outbuf = '' ;
    this.erule = '' ;
    this.einput = 0 ;
    this.token = '' ;
    this.labelcount = 1 ;
    this.stackframe = -1 ;
    this.stos = -1 ;
    this.stack = [] ;
  },

  ctxpush: function (rulename){
    // push and initialize a new stackframe
    var LM ;
    // new context inherits current context left margin
    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;
    this.stos++ ;
    this.stackframe = this.stos * this.stackframesize ;
    // stackframe definition
    this.stack[this.stackframe + 0] = 0 ;        // generated label
    this.stack[this.stackframe + 1] = rulename ; // called rule name
    this.stack[this.stackframe + 2] = LM ;       // left margin
    // clear additional stackframe backtracking entries
    this.bkclear() ;
  },

  ctxpop: function (){
    // pop and possibly deallocate old stackframe
    this.stos-- ; // pop stackframe
    this.stackframe = this.stos * this.stackframesize ;
  },

  out: function (s){
    // output string
    var i ;
    // if newline last output, add left margin before string
    if (this.outbuf.charAt(this.outbuf.length - 1) == '\n') {
      i = this.stack[this.stackframe + 2] ;
      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;
    this.outbuf += s ;
  },

  eol: function (){
    // output end of line
    this.outbuf += '\n' ;
  },

  test: function (s) {
    // test for a string in the input
    var i ;
    // delete whitespace
    while ((this.inbuf.charAt(this.inp) == ' ')  ||
           (this.inbuf.charAt(this.inp) == '\n') ||
           (this.inbuf.charAt(this.inp) == '\r') ||
           (this.inbuf.charAt(this.inp) == '\t') ) this.inp++ ;
    // test string case insensitive
    this.pflag = true ; i = 0 ;
    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )
    { this.pflag = (s.charAt(i).toUpperCase() ==
                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;
      i++ ; } ;
    this.pflag = this.pflag && (i == s.length) ;
    // advance input if found
    if (this.pflag) this.inp = this.inp + s.length ;
  },

  bkerr: function () {
    // compilation error, provide error indication and context
    this.eflag = true ;
    this.erule = this.stack[this.stackframe + 1] ;
    this.einput = this.inp ;
  },

  bkset: function () {
    // set backtrack context on stack
    this.stack[this.stackframe + 3] = this.inp ;           // input position
    this.stack[this.stackframe + 4] = this.outbuf.length ; // output position
    this.stack[this.stackframe + 5] = this.token ;         // current token
  },

  bkclear: function () {
    // clear backtrack context on stack
    this.stack[this.stackframe + 3] = -1 ; // input position
    this.stack[this.stackframe + 4] = -1 ; // output position
    this.stack[this.stackframe + 5] = '' ; // current token
  },

  bkrestore: function () {
    // restore context for backtracking
    this.eflag = false ;
    this.inp = this.stack[this.stackframe + 3] ;           // input position
    this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position
    this.token = this.stack[this.stackframe + 5] ;         // current token
  }

}
